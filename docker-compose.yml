version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: linkinvests-redis
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: linkinvests-postgres
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: linkinvests
      POSTGRES_PASSWORD: linkinvests
      POSTGRES_DB: linkinvests
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U linkinvests']
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  localstack:
    image: localstack/localstack:s3-latest
    container_name: linkinvests-localstack
    ports:
      - '4566:4566' # LocalStack Gateway
    environment:
      - DEBUG=1
      - PERSISTENCE=1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=eu-west-3
    volumes:
      - localstack-data:/var/lib/localstack
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4566/_localstack/health']
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  # Application Services
  frontend:
    build:
      context: .
      dockerfile: docker/app.Dockerfile
    container_name: linkinvests-frontend
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://linkinvests:linkinvests@postgres:5432/linkinvests
      - NEXTAUTH_SECRET=your-secret-key-here
      - NEXTAUTH_URL=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  scraping-worker:
    build:
      context: .
      dockerfile: docker/scraper.Dockerfile
    container_name: linkinvests-scraping-worker
    ports:
      - '8081:8081'
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://linkinvests:linkinvests@postgres:5432/linkinvests
      - REDIS_URL=redis://redis:6379
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_REGION=eu-west-3
      - AWS_ENDPOINT_URL=http://localstack:4566
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8081/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  sourcing-worker:
    build:
      context: .
      dockerfile: docker/sourcing-worker.Dockerfile
    container_name: linkinvests-sourcing-worker
    ports:
      - '8080:8080'
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://linkinvests:linkinvests@postgres:5432/linkinvests
      - REDIS_URL=redis://redis:6379
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_REGION=eu-west-3
      - AWS_ENDPOINT_URL=http://localstack:4566
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  localstack-data:
    driver: local
